La función calcula el costo mínimo tras pasar por n estaciones de trabajo utilizando el método de backtracking, la idea del funcionamiento es que en cada estación compara el costo de cambiar de linea de ensamblaje con mantenerse en la misma, y dependiendo cual costo sea el mínimo se queda en esa línea o se cambia

fun fabrica_backtracking(S1 : array [0..n][0..1] of cost, t: array[0..n][0..1] of cost, i: nat) ret costo: cost
	if S1[0,0] || S1[0,1] then costo = min(S1[0,1],S1[0,0]) fi
	if S1[i+1,0]<=S1[i+1,1]+t[i,1] then 
		costo := min ((S1[i,0]+fabrica(S1[n-1,0],t[i,0],i)),(S1[i,1]+fabrica(S1[n-1,1],t[i,1],i))) fi
	if S1[i+1,1]>S1[i+1,0]+t[i,0] then 
		costo := min ((S1[i,1]+fabrica(S1[n-1,1],t[i,1],i)), (S1[i,0]+fabrica(S1[n-1,0],t[i,0],i))) fi
	end fun


	
fun fabrica_dynamic(S1 : array [0..n][0..1] of cost, t: array[0..n][0..1] of cost, n: Nat) ret costo: cost
	if n = 0 then costo := 0 fi
	if n = 1 then costo = min(S1[0,1],S1[0,0]) fi
	if n > 1 then 
		for i = 0 to n do
			if	S1[i,0]<=S1[i,1]+t[i,1] then
				costo := min (S1[i,0] + min(S1[i+1,0], S1[i+1,1]+t[i,0], S1[i,1] + min(S1[i+1,1], S1[i+1,0] t[i,1])))
			else if S1[i,1]>S1[i,0]+t[i,0] then
				costo := min ( S1[i,1] + min(S1[i+1,0], S1[i+1,1]+t[i,0], S1[i,0] + min(S1[i+1,1], S1[i+1,0] t[i,1])))
		od
	fi
	end fun
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

